---
import Layout from '../layouts/Layout.astro';
import SearchBar from '../components/SearchBar.astro';
---

<Layout>
  <main class="min-h-screen flex items-center justify-center p-4 relative overflow-hidden">
    <!-- Elementos decorativos de fondo -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
      <div class="absolute -top-40 -right-40 w-80 h-80 bg-white/10 rounded-full blur-3xl"></div>
      <div class="absolute -bottom-40 -left-40 w-96 h-96 bg-blue-300/20 rounded-full blur-3xl"></div>
      <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64 bg-white/5 rounded-full blur-2xl"></div>
    </div>

    <div class="flex flex-col items-center w-full max-w-lg relative z-10">
      <!-- Header con mejor dise√±o -->
      <header class="text-center mb-8 text-white">
        <div class="mb-4">
          <div class="inline-flex items-center justify-center w-16 h-16 bg-white/20 backdrop-blur-md rounded-2xl mb-4 shadow-xl">
            <span class="text-2xl">üå§Ô∏è</span>
          </div>
        </div>
        <h1 class="text-4xl md:text-5xl font-extralight mb-3 tracking-wide">
          <span class="bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent">
            Weather
          </span>
          <span class="font-light">App</span>
        </h1>
        <p class="text-lg opacity-80 font-light tracking-wide">
          Descubre el clima en tiempo real
        </p>
      </header>
      
      <SearchBar />
      
      <div id="weather-container" class="w-full justify-center hidden">
        <!-- El contenido se generar√° din√°micamente -->
      </div>
      
      <div id="loading" class="flex-col items-center text-white mt-8 hidden">
        <div class="relative">
          <div class="w-12 h-12 border-4 border-white/20 border-t-white rounded-full animate-spin"></div>
          <div class="absolute inset-0 w-12 h-12 border-4 border-transparent border-l-blue-200 rounded-full animate-spin animate-reverse"></div>
        </div>
        <p class="text-lg mt-4 font-light">Obteniendo datos...</p>
      </div>
      
      <div id="welcome" class="text-center text-white mt-12">
        <div class="inline-flex items-center justify-center w-24 h-24 bg-gradient-to-br from-white/20 to-white/10 backdrop-blur-md rounded-3xl mb-6 shadow-2xl">
          <span class="text-4xl">üåç</span>
        </div>
        <h2 class="text-2xl font-light mb-3 opacity-90">Explora el Mundo</h2>
        <p class="text-lg opacity-70 font-light leading-relaxed max-w-sm mx-auto">
          Busca cualquier ciudad y descubre su clima actual con informaci√≥n detallada
        </p>
        
        <!-- Sugerencias de ciudades populares -->
        <div class="mt-8">
          <p class="text-sm opacity-60 mb-4">Ciudades populares:</p>
          <div class="flex flex-wrap justify-center gap-2">
            <button class="city-suggestion px-4 py-2 bg-white/10 backdrop-blur-sm rounded-full text-sm hover:bg-white/20 transition-all duration-300 border border-white/20" data-city="Londres">
              üá¨üáß Londres
            </button>
            <button class="city-suggestion px-4 py-2 bg-white/10 backdrop-blur-sm rounded-full text-sm hover:bg-white/20 transition-all duration-300 border border-white/20" data-city="Tokyo">
              üáØüáµ Tokio
            </button>
            <button class="city-suggestion px-4 py-2 bg-white/10 backdrop-blur-sm rounded-full text-sm hover:bg-white/20 transition-all duration-300 border border-white/20" data-city="New York">
              üá∫üá∏ Nueva York
            </button>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { getCurrentWeatherWithHourly } from '../services/weatherApi';

  // Declarar tipos para TypeScript
  declare global {
    interface Window {
      showDayHourlyForecast: (dayIndex: number) => void;
      selectSpecificDate: (dateString: string, dayIndex: number) => void;
      searchCustomDateForecast: (dateString: string) => Promise<void>;
    }
  }
  
  // Funci√≥n para mostrar el selector de fecha
  function showDateSelector() {
    if (!globalWeatherData) return;
    
    // Obtener fechas disponibles (hasta 10 d√≠as desde hoy, incluyendo hoy)
    const today = new Date();
    const availableDates = [];
    
    for (let i = 0; i < 10; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      availableDates.push({
        date: date,
        dateString: date.toISOString().split('T')[0],
        displayName: i === 0 ? 'Hoy' : 
                    i === 1 ? 'Ma√±ana' : 
                    i === 2 ? 'Pasado ma√±ana' : 
                    date.toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric', month: 'short' }),
        dayIndex: i
      });
    }
    
    // Crear modal del selector de fecha
    const modal = document.createElement('div');
    modal.id = 'date-selector-modal';
    modal.className = 'fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4';
    
    const datesHTML = availableDates.map(dateInfo => {
      const isAvailable = dateInfo.dayIndex < (globalWeatherData.forecast?.forecastday?.length || 0);
      const buttonClass = isAvailable 
        ? 'bg-white/10 hover:bg-white/20 border-white/30 hover:border-white/50 cursor-pointer' 
        : 'bg-gray-500/20 border-gray-500/30 cursor-not-allowed opacity-50';
      
      return `
        <button class="${buttonClass} backdrop-blur-sm rounded-2xl p-4 transition-all duration-300 text-center border ${
          isAvailable ? 'transform hover:scale-105' : ''
        }" ${isAvailable ? `onclick="selectSpecificDate('${dateInfo.dateString}', ${dateInfo.dayIndex})"` : 'disabled'}>
          <div class="text-sm font-medium mb-1">${dateInfo.displayName}</div>
          <div class="text-xs opacity-70">${dateInfo.date.getDate()} ${dateInfo.date.toLocaleDateString('es-ES', { month: 'short' })}</div>
          <div class="text-xs opacity-50">${dateInfo.dateString}</div>
          ${!isAvailable ? '<div class="text-xs text-red-300 mt-1">No disponible</div>' : ''}
        </button>
      `;
    }).join('');
    
    modal.innerHTML = `
      <div class="bg-white/20 backdrop-blur-xl border border-white/30 rounded-3xl p-6 max-w-2xl w-full text-white transform transition-all duration-300 scale-95 opacity-0 max-h-[90vh] overflow-y-auto" id="date-selector-content">
        <!-- Header del modal -->
        <div class="flex items-center justify-between mb-6">
          <div>
            <h3 class="text-xl font-medium">Seleccionar Fecha</h3>
            <p class="text-sm opacity-70">Elige la fecha para ver el pron√≥stico detallado</p>
          </div>
          <button id="close-date-selector" class="w-8 h-8 bg-white/20 hover:bg-white/30 rounded-full flex items-center justify-center transition-colors duration-200">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
        </div>
        
        <!-- Informaci√≥n de la ubicaci√≥n -->
        <div class="bg-white/10 rounded-2xl p-4 mb-6 text-center backdrop-blur-sm">
          <h4 class="text-lg font-medium opacity-95">${globalWeatherData.location.name}, ${globalWeatherData.location.country}</h4>
          <p class="text-sm opacity-70">Selecciona una fecha para ver el pron√≥stico por horas</p>
          <p class="text-xs opacity-50 mt-2">Rango: ${today.toISOString().split('T')[0]} a ${new Date(today.getTime() + 9 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}</p>
        </div>
        
        <!-- Selector de fechas -->
        <div class="mb-6">
          <h5 class="text-lg font-medium mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2 text-blue-300" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
            </svg>
            Fechas Disponibles
          </h5>
          <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
            ${datesHTML}
          </div>
        </div>
        
        <!-- Selector de fecha personalizada -->
        <div class="mb-6">
          <h5 class="text-lg font-medium mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2 text-green-300" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
            </svg>
            Fecha Personalizada
          </h5>
          <div class="bg-white/10 rounded-2xl p-4 backdrop-blur-sm">
            <div class="flex flex-col md:flex-row gap-3 items-end">
              <div class="flex-1">
                <label class="block text-sm opacity-70 mb-2">Seleccionar fecha:</label>
                <input type="date" id="custom-date" class="w-full px-3 py-2 bg-white/20 border border-white/30 rounded-xl text-white placeholder-white/50 focus:outline-none focus:border-blue-400 focus:bg-white/30" 
                       min="${today.toISOString().split('T')[0]}" 
                       max="${new Date(today.getTime() + 8 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}">
              </div>
              <button id="search-custom-date" class="px-6 py-2 bg-blue-500/30 hover:bg-blue-500/40 border border-blue-400/50 rounded-xl transition-all duration-300 text-sm font-medium">
                Buscar
              </button>
            </div>
            <p class="text-xs opacity-60 mt-2">Nota: Solo disponible hasta 10 d√≠as desde hoy</p>
          </div>
        </div>
        
        <!-- Bot√≥n cerrar -->
        <button id="close-date-selector-btn" class="w-full py-3 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-2xl transition-all duration-300 text-sm font-medium border border-white/30 hover:border-white/50">
          Cerrar
        </button>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Animar entrada del modal
    setTimeout(() => {
      const modalContent = document.getElementById('date-selector-content')!;
      modalContent.style.transform = 'scale(1)';
      modalContent.style.opacity = '1';
    }, 10);
    
    // Event listeners para cerrar el modal
    const closeBtn = document.getElementById('close-date-selector')!;
    const closeBtnFooter = document.getElementById('close-date-selector-btn')!;
    const searchCustomBtn = document.getElementById('search-custom-date')!;
    
    const closeModal = () => {
      const modalContent = document.getElementById('date-selector-content')!;
      modalContent.style.transform = 'scale(0.95)';
      modalContent.style.opacity = '0';
      
      setTimeout(() => {
        document.body.removeChild(modal);
      }, 300);
    };
    
    // Funci√≥n para buscar fecha personalizada
    const searchCustomDate = () => {
      const dateInput = document.getElementById('custom-date') as HTMLInputElement;
      if (dateInput.value) {
        searchCustomDateForecast(dateInput.value);
        closeModal();
      }
    };
    
    closeBtn.addEventListener('click', closeModal);
    closeBtnFooter.addEventListener('click', closeModal);
    searchCustomBtn.addEventListener('click', searchCustomDate);
    
    // Cerrar al hacer clic fuera del modal
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });
    
    // Cerrar con tecla Escape
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        e.preventDefault();
        e.stopPropagation();
        closeModal();
        document.removeEventListener('keydown', handleKeyDown);
      }
    };
    
    document.addEventListener('keydown', handleKeyDown);
  }
  
  // Funci√≥n para seleccionar una fecha espec√≠fica de las disponibles
  function selectSpecificDate(dateString: string, dayIndex: number) {
    // Cerrar el selector de fecha
    const modal = document.getElementById('date-selector-modal');
    if (modal) {
      document.body.removeChild(modal);
    }
    
    // Mostrar el pron√≥stico del d√≠a seleccionado
    showDayHourlyForecast(dayIndex);
  }
  
  // Funci√≥n para buscar pron√≥stico de fecha personalizada
  async function searchCustomDateForecast(dateString: string) {
    if (!globalWeatherData) return;
    
    const selectedDate = new Date(dateString + 'T00:00:00');
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Normalizar a medianoche para comparaci√≥n exacta
    
    const diffTime = selectedDate.getTime() - today.getTime();
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    
    console.log('Fecha seleccionada:', dateString);
    console.log('Hoy normalizado:', today.toISOString().split('T')[0]);
    console.log('Diferencia en d√≠as:', diffDays);
    
    // Verificar si la fecha est√° dentro del rango permitido
    if (diffDays < 0 || diffDays > 9) {
      alert(`Solo se pueden consultar fechas entre hoy y los pr√≥ximos 9 d√≠as. D√≠as calculados: ${diffDays}`);
      return;
    }
    
    try {
      // Mostrar loading
      showLoadingForDate();
      
      // Obtener datos extendidos si es necesario
      const city = globalWeatherData.location.name;
      const extendedData = await getCurrentWeatherWithHourly(city, diffDays + 1);
      
      // Actualizar datos globales
      globalWeatherData = extendedData;
      
      // Ocultar loading
      hideLoadingForDate();
      
      // Mostrar el pron√≥stico del d√≠a seleccionado
      showDayHourlyForecast(diffDays);
      
    } catch (error) {
      hideLoadingForDate();
      console.error('Error al obtener pron√≥stico:', error);
      alert('Error al obtener el pron√≥stico para la fecha seleccionada.');
    }
  }
  
  // Funciones para mostrar/ocultar loading durante b√∫squeda de fecha
  function showLoadingForDate() {
    const loadingModal = document.createElement('div');
    loadingModal.id = 'date-loading-modal';
    loadingModal.className = 'fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-[70] p-4';
    
    loadingModal.innerHTML = `
      <div class="bg-white/20 backdrop-blur-xl border border-white/30 rounded-3xl p-8 text-white text-center">
        <div class="relative mb-4">
          <div class="w-12 h-12 border-4 border-white/20 border-t-white rounded-full animate-spin mx-auto"></div>
        </div>
        <p class="text-lg font-medium">Obteniendo pron√≥stico...</p>
        <p class="text-sm opacity-70">Consultando fecha personalizada</p>
      </div>
    `;
    
    document.body.appendChild(loadingModal);
  }
  
  function hideLoadingForDate() {
    const loadingModal = document.getElementById('date-loading-modal');
    if (loadingModal) {
      document.body.removeChild(loadingModal);
    }
  }

  // Escuchar el evento personalizado de datos del clima
  document.addEventListener('weather-data', (event: any) => {
    const weatherData = event.detail;
    showWeatherData(weatherData);
  });
  
  function showWeatherData(data: any) {
    // Almacenar datos globalmente para uso en otras funciones
    globalWeatherData = data;
    
    const weatherContainer = document.getElementById('weather-container')!;
    const welcome = document.getElementById('welcome')!;
    const loading = document.getElementById('loading')!;
    
    // Ocultar welcome y loading
    welcome.classList.add('hidden');
    loading.classList.add('hidden');
    
    // Determinar color del gradiente seg√∫n temperatura
    const temp = data.current.temp_c;
    
    // Crear el HTML de la tarjeta del clima con mejor dise√±o
    weatherContainer.innerHTML = `
      <div class="backdrop-blur-lg bg-gradient-to-br from-white/20 to-white/10 border border-white/30 rounded-3xl p-6 shadow-2xl max-w-md w-full text-center text-white transform transition-all duration-500 hover:scale-105">
        <!-- Header de ubicaci√≥n -->
        <div class="mb-6">
          <div class="flex items-center justify-center mb-2">
            <svg class="w-5 h-5 mr-2 opacity-70" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 2C6.69 2 4 4.69 4 8c0 5.25 6 12 6 12s6-6.75 6-12c0-3.31-2.69-6-6-6zm0 8.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
            </svg>
            <h2 class="text-xl font-medium opacity-95">${data.location.name}</h2>
          </div>
          <p class="text-sm opacity-70">${data.location.country}</p>
          <p class="text-xs opacity-60 mt-1">${new Date(data.location.localtime).toLocaleString('es-ES', {
            weekday: 'long',
            hour: '2-digit',
            minute: '2-digit'
          })}</p>
        </div>
        
        <!-- Temperatura principal -->
        <div class="mb-8 relative">
          <div class="flex items-center justify-center gap-4 mb-3">
            <div class="text-6xl font-ultralight bg-gradient-to-br " style="background: linear-gradient(to bottom right, ${temp > 30 ? '#fb923c, #ef4444' : temp > 20 ? '#fbbf24, #fb923c' : temp > 10 ? '#4ade80, #3b82f6' : '#60a5fa, #2563eb'}); -webkit-background-clip: text; background-clip: text; color: transparent;">
              ${Math.round(data.current.temp_c)}¬∞
            </div>
            <div class="relative">
              <img src="${data.current.condition.icon}" alt="${data.current.condition.text}" class="w-16 h-16 drop-shadow-xl" />
              <div class="absolute inset-0 bg-white/20 rounded-full blur-xl scale-150 -z-10"></div>
            </div>
          </div>
          <p class="text-lg opacity-90 font-light capitalize mb-2">${data.current.condition.text}</p>
          <p class="text-sm opacity-70">Sensaci√≥n t√©rmica ${Math.round(data.current.feelslike_c)}¬∞C</p>
        </div>
        
        <!-- Grid de informaci√≥n adicional -->
        <div class="grid grid-cols-2 gap-4 pt-6 border-t border-white/20">
          <div class="text-center p-3 bg-white/10 rounded-2xl backdrop-blur-sm">
            <div class="flex items-center justify-center mb-2">
              <svg class="w-5 h-5 opacity-70" fill="currentColor" viewBox="0 0 20 20">
                <path d="M6.5 2.5c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm7 7c0 3.3-2.7 6-6 6s-6-2.7-6-6 2.7-6 6-6 6 2.7 6 6z"/>
              </svg>
              <span class="text-xs opacity-70 ml-1">Humedad</span>
            </div>
            <span class="text-lg font-medium">${data.current.humidity}%</span>
          </div>
          
          <div class="text-center p-3 bg-white/10 rounded-2xl backdrop-blur-sm">
            <div class="flex items-center justify-center mb-2">
              <svg class="w-5 h-5 opacity-70" fill="currentColor" viewBox="0 0 20 20">
                <path d="M12.5 5.5l-1-1h-3l-1 1v4l1 1h3l1-1v-4zm-4 3v-2h2v2h-2z"/>
              </svg>
              <span class="text-xs opacity-70 ml-1">Viento</span>
            </div>
            <span class="text-lg font-medium">${Math.round(data.current.wind_kph)} km/h</span>
          </div>
        </div>
        
        <!-- Bot√≥n para m√°s detalles -->
        <button id="extended-forecast-btn" class="w-full mt-6 py-3 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-2xl transition-all duration-300 text-sm font-medium border border-white/30 hover:border-white/50">
          Ver pron√≥stico extendido
        </button>
        
        <!-- Bot√≥n para selector de fecha -->
        <button id="date-selector-btn" class="w-full mt-3 py-3 bg-blue-500/20 hover:bg-blue-500/30 backdrop-blur-sm rounded-2xl transition-all duration-300 text-sm font-medium border border-blue-400/30 hover:border-blue-400/50">
          üìÖ Consultar fecha espec√≠fica
        </button>
      </div>
    `;
    
    // Mostrar el contenedor y aplicar flex
    weatherContainer.classList.remove('hidden');
    weatherContainer.classList.add('flex');
    
    // Animar la aparici√≥n
    weatherContainer.style.opacity = '0';
    weatherContainer.style.transform = 'translateY(30px) scale(0.95)';
    
    setTimeout(() => {
      weatherContainer.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
      weatherContainer.style.opacity = '1';
      weatherContainer.style.transform = 'translateY(0) scale(1)';
    }, 50);
    
    // Agregar funcionalidad al bot√≥n de pron√≥stico extendido
    const extendedBtn = document.getElementById('extended-forecast-btn');
    if (extendedBtn) {
      extendedBtn.addEventListener('click', () => {
        showExtendedForecast(data);
      });
    }
    
    // Agregar funcionalidad al bot√≥n de selector de fecha
    const dateSelectorBtn = document.getElementById('date-selector-btn');
    if (dateSelectorBtn) {
      dateSelectorBtn.addEventListener('click', () => {
        showDateSelector();
      });
    }
  }
  
  // Funci√≥n para mostrar el modal de pron√≥stico extendido
  function showExtendedForecast(data: any) {
    // Almacenar datos globalmente
    globalWeatherData = data;
    
    // Cerrar cualquier modal existente
    const existingModal = document.getElementById('forecast-modal');
    if (existingModal) {
      document.body.removeChild(existingModal);
    }
    
    const existingDayModal = document.getElementById('day-hourly-modal');
    if (existingDayModal) {
      document.body.removeChild(existingDayModal);
    }
    
    // Obtener pron√≥stico por horas (desde ahora hasta medianoche)
    const currentHour = new Date().getHours();
    const todayForecast = data.forecast?.forecastday?.[0]?.hour || [];
    const hourlyForecast = todayForecast.slice(currentHour, 24);
    
    // Generar HTML del pron√≥stico por horas
    const hourlyHTML = hourlyForecast.map(hour => {
      const time = new Date(hour.time).getHours();
      const timeStr = time === 0 ? '12 AM' : time === 12 ? '12 PM' : time < 12 ? `${time} AM` : `${time - 12} PM`;
      const temp = Math.round(hour.temp_c);
      const rainChance = hour.chance_of_rain || 0;
      
      return `
        <div class="flex-shrink-0 bg-white/10 rounded-2xl p-3 text-center backdrop-blur-sm w-20">
          <p class="text-xs opacity-70 mb-1">${timeStr}</p>
          <img src="${hour.condition.icon}" alt="${hour.condition.text}" class="w-8 h-8 mx-auto mb-1" />
          <p class="text-sm font-bold">${temp}¬∞</p>
          <p class="text-xs opacity-60">üåß ${rainChance}%</p>
          <p class="text-xs opacity-60">üå¨ ${Math.round(hour.wind_kph)} km/h</p>
        </div>
      `;
    }).join('');
    
    // Obtener pron√≥stico de 3 d√≠as
    const forecastDays = data.forecast?.forecastday || [];
    const dailyForecastHTML = forecastDays.map((day, index) => {
      const date = new Date(day.date);
      const dayName = index === 0 ? 'Hoy' : 
                     index === 1 ? 'Ma√±ana' : 
                     date.toLocaleDateString('es-ES', { weekday: 'short' });
      const maxTemp = Math.round(day.day.maxtemp_c);
      const minTemp = Math.round(day.day.mintemp_c);
      const rainChance = day.day.daily_chance_of_rain || 0;
      
      return `
        <div class="bg-white/10 rounded-2xl p-4 backdrop-blur-sm cursor-pointer hover:bg-white/20 transition-all duration-300 transform hover:scale-105" onclick="showDayHourlyForecast(${index})">
          <div class="text-center">
            <h6 class="text-sm font-medium mb-2 opacity-90">${dayName}</h6>
            <p class="text-xs opacity-70 mb-3">${date.toLocaleDateString('es-ES', { day: 'numeric', month: 'short' })}</p>
            <img src="${day.day.condition.icon}" alt="${day.day.condition.text}" class="w-12 h-12 mx-auto mb-2" />
            <p class="text-xs opacity-80 mb-2 capitalize leading-tight">${day.day.condition.text}</p>
            <div class="space-y-1">
              <p class="text-sm"><span class="font-bold">${maxTemp}¬∞</span> / <span class="opacity-70">${minTemp}¬∞</span></p>
              <p class="text-xs opacity-70">üåß ${rainChance}%</p>
            </div>
            <p class="text-xs text-blue-300 mt-2 opacity-80">üëÜ Ver por horas</p>
          </div>
        </div>
      `;
    }).join('');
    
    // Crear modal
    const modal = document.createElement('div');
    modal.id = 'forecast-modal';
    modal.className = 'fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4';
    
    modal.innerHTML = `
      <div class="bg-white/20 backdrop-blur-xl border border-white/30 rounded-3xl p-6 max-w-4xl w-full text-white transform transition-all duration-300 scale-95 opacity-0 max-h-[90vh] overflow-y-auto" id="modal-content">
        <!-- Header del modal -->
        <div class="flex items-center justify-between mb-6">
          <h3 class="text-xl font-medium">Pron√≥stico Completo</h3>
          <button id="close-modal" class="w-8 h-8 bg-white/20 hover:bg-white/30 rounded-full flex items-center justify-center transition-colors duration-200">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
        </div>
        
        <!-- Ubicaci√≥n -->
        <div class="mb-8 text-center">
          <h4 class="text-lg font-medium opacity-95">${data.location.name}, ${data.location.country}</h4>
          <p class="text-sm opacity-70">Coordenadas: ${data.location.lat}¬∞, ${data.location.lon}¬∞</p>
        </div>
        
        <!-- Pron√≥stico de 3 d√≠as -->
        <div class="mb-8">
          <h5 class="text-lg font-medium mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2 text-green-300" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
            </svg>
            Pron√≥stico de 3 D√≠as
          </h5>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            ${dailyForecastHTML}
          </div>
        </div>
        
        <!-- Pron√≥stico por horas -->
        <div class="mb-8">
          <h5 class="text-lg font-medium mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2 text-blue-300" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
            </svg>
            Clima por Horas (Hasta Medianoche)
          </h5>
          <div class="flex gap-3 overflow-x-auto pb-4" style="scrollbar-width: thin; scrollbar-color: rgba(255,255,255,0.3) transparent;">
            ${hourlyHTML || '<p class="text-sm opacity-70 text-center w-full">No hay datos disponibles</p>'}
          </div>
        </div>
        
        <!-- Informaci√≥n adicional -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <div class="bg-white/10 rounded-2xl p-4 text-center backdrop-blur-sm">
            <div class="flex items-center justify-center mb-2">
              <svg class="w-5 h-5 mr-2 text-yellow-300" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
              </svg>
            </div>
            <p class="text-xs opacity-70 mb-1">√çndice UV</p>
            <p class="text-lg font-bold">${data.current.uv || 0}</p>
          </div>
          
          <div class="bg-white/10 rounded-2xl p-4 text-center backdrop-blur-sm">
            <div class="flex items-center justify-center mb-2">
              <svg class="w-5 h-5 mr-2 text-blue-300" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>
                <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"/>
              </svg>
            </div>
            <p class="text-xs opacity-70 mb-1">Visibilidad</p>
            <p class="text-lg font-bold">${data.current.vis_km || 'N/A'}</p>
            <p class="text-xs opacity-70">km</p>
          </div>
          
          <div class="bg-white/10 rounded-2xl p-4 text-center backdrop-blur-sm">
            <div class="flex items-center justify-center mb-2">
              <svg class="w-5 h-5 mr-2 text-purple-300" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M3 6a3 3 0 013-3h10a1 1 0 01.8 1.6L14.25 8l2.55 3.4A1 1 0 0116 13H6a1 1 0 00-1 1v3a1 1 0 11-2 0V6z" clip-rule="evenodd"/>
              </svg>
            </div>
            <p class="text-xs opacity-70 mb-1">Presi√≥n</p>
            <p class="text-lg font-bold">${data.current.pressure_mb || 'N/A'}</p>
            <p class="text-xs opacity-70">mb</p>
          </div>
          
          <div class="bg-white/10 rounded-2xl p-4 text-center backdrop-blur-sm">
            <div class="flex items-center justify-center mb-2">
              <svg class="w-5 h-5 mr-2 text-green-300" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
              </svg>
            </div>
            <p class="text-xs opacity-70 mb-1">Hora Local</p>
            <p class="text-sm font-bold">${new Date(data.location.localtime).toLocaleTimeString('es-ES', {
              hour: '2-digit',
              minute: '2-digit'
            })}</p>
          </div>
        </div>
        
        <!-- Bot√≥n cerrar -->
        <button id="close-modal-btn" class="w-full py-3 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-2xl transition-all duration-300 text-sm font-medium border border-white/30 hover:border-white/50">
          Cerrar
        </button>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Animar entrada del modal
    setTimeout(() => {
      const modalContent = document.getElementById('modal-content')!;
      modalContent.style.transform = 'scale(1)';
      modalContent.style.opacity = '1';
    }, 10);
    
    // Event listeners para cerrar el modal
    const closeBtn = document.getElementById('close-modal')!;
    const closeBtnFooter = document.getElementById('close-modal-btn')!;
    
    const closeModal = () => {
      const modalContent = document.getElementById('modal-content')!;
      modalContent.style.transform = 'scale(0.95)';
      modalContent.style.opacity = '0';
      
      setTimeout(() => {
        document.body.removeChild(modal);
      }, 300);
    };
    
    closeBtn.addEventListener('click', closeModal);
    closeBtnFooter.addEventListener('click', closeModal);
    
    // Cerrar al hacer clic fuera del modal
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });
    
    // Cerrar con tecla Escape (con manejo mejorado)
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        e.preventDefault();
        e.stopPropagation();
        closeModal();
        document.removeEventListener('keydown', handleKeyDown);
      }
    };
    
    // Remover event listeners previos antes de agregar nuevos
    const existingHandlers = document.querySelectorAll('[data-keydown-handler]');
    existingHandlers.forEach(handler => {
      document.removeEventListener('keydown', handler as any);
    });
    
    document.addEventListener('keydown', handleKeyDown);
  }
  
  // Variable global para almacenar los datos del clima
  let globalWeatherData = null;
  
  // Funci√≥n para mostrar el pron√≥stico por horas de un d√≠a espec√≠fico
  function showDayHourlyForecast(dayIndex) {
    if (!globalWeatherData) return;
    
    // Cerrar el modal principal si existe
    const existingModal = document.getElementById('forecast-modal');
    if (existingModal) {
      document.body.removeChild(existingModal);
    }
    
    const dayData = globalWeatherData.forecast?.forecastday?.[dayIndex];
    if (!dayData) return;
    
    const date = new Date(dayData.date);
    const dayName = dayIndex === 0 ? 'Hoy' : 
                   dayIndex === 1 ? 'Ma√±ana' : 
                   dayIndex === 2 ? 'Pasado ma√±ana' : 
                   date.toLocaleDateString('es-ES', { weekday: 'long' });
    
    // Para "Hoy", mostrar desde la hora actual. Para otros d√≠as, mostrar todas las 24 horas
    const hourlyData = dayData.hour || [];
    const currentHour = new Date().getHours();
    const hoursToShow = dayIndex === 0 ? hourlyData.slice(currentHour) : hourlyData;
    
    // Generar HTML del pron√≥stico por horas
    const hourlyHTML = hoursToShow.map(hour => {
      const time = new Date(hour.time).getHours();
      const timeStr = time === 0 ? '12 AM' : time === 12 ? '12 PM' : time < 12 ? `${time} AM` : `${time - 12} PM`;
      const temp = Math.round(hour.temp_c);
      const rainChance = hour.chance_of_rain || 0;
      
      return `
        <div class="flex-shrink-0 bg-white/10 rounded-2xl p-3 text-center backdrop-blur-sm w-20">
          <p class="text-xs opacity-70 mb-1">${timeStr}</p>
          <img src="${hour.condition.icon}" alt="${hour.condition.text}" class="w-8 h-8 mx-auto mb-1" />
          <p class="text-sm font-bold">${temp}¬∞</p>
          <p class="text-xs opacity-60">üåß ${rainChance}%</p>
          <p class="text-xs opacity-60">üå¨ ${Math.round(hour.wind_kph)} km/h</p>
        </div>
      `;
    }).join('');
    
    // Crear modal para el d√≠a espec√≠fico
    const modal = document.createElement('div');
    modal.id = 'day-hourly-modal';
    modal.className = 'fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-[60] p-4';
    
    modal.innerHTML = `
      <div class="bg-white/20 backdrop-blur-xl border border-white/30 rounded-3xl p-6 max-w-4xl w-full text-white transform transition-all duration-300 scale-95 opacity-0 max-h-[90vh] overflow-y-auto" id="day-modal-content">
        <!-- Header del modal -->
        <div class="flex items-center justify-between mb-6">
          <div>
            <h3 class="text-xl font-medium">${dayName} - Por Horas</h3>
            <p class="text-sm opacity-70">${date.toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric', month: 'long' })}</p>
          </div>
          <button id="close-day-modal" class="w-8 h-8 bg-white/20 hover:bg-white/30 rounded-full flex items-center justify-center transition-colors duration-200">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
        </div>
        
        <!-- Resumen del d√≠a -->
        <div class="bg-white/10 rounded-2xl p-6 mb-6 backdrop-blur-sm">
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 items-center">
            <div class="text-center">
              <img src="${dayData.day.condition.icon}" alt="${dayData.day.condition.text}" class="w-16 h-16 mx-auto mb-2" />
              <p class="text-sm opacity-80 capitalize">${dayData.day.condition.text}</p>
            </div>
            <div class="text-center">
              <p class="text-xs opacity-70 mb-1">Temperatura</p>
              <p class="text-lg font-bold">${Math.round(dayData.day.maxtemp_c)}¬∞ / ${Math.round(dayData.day.mintemp_c)}¬∞</p>
            </div>
            <div class="text-center">
              <p class="text-xs opacity-70 mb-1">Lluvia</p>
              <p class="text-lg font-bold">üåß ${dayData.day.daily_chance_of_rain || 0}%</p>
            </div>
            <div class="text-center">
              <p class="text-xs opacity-70 mb-1">Viento M√°x.</p>
              <p class="text-lg font-bold">üå¨ ${Math.round(dayData.day.maxwind_kph)} km/h</p>
            </div>
          </div>
        </div>
        
        <!-- Pron√≥stico por horas -->
        <div class="mb-6">
          <h5 class="text-lg font-medium mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2 text-blue-300" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
            </svg>
            ${dayIndex === 0 ? 'Desde ahora hasta medianoche' : 'De 12:00 AM a 11:00 PM'}
            <span class="ml-2 text-sm opacity-70">(${hoursToShow.length} horas)</span>
          </h5>
          <div class="flex gap-3 overflow-x-auto pb-4" style="scrollbar-width: thin; scrollbar-color: rgba(255,255,255,0.3) transparent;">
            ${hourlyHTML || '<p class="text-sm opacity-70 text-center w-full">No hay datos disponibles</p>'}
          </div>
        </div>
        
        <!-- Botones de acci√≥n -->
        <div class="flex gap-3">
          <button id="back-to-full-forecast" class="flex-1 py-3 bg-blue-500/20 hover:bg-blue-500/30 backdrop-blur-sm rounded-2xl transition-all duration-300 text-sm font-medium border border-blue-400/30 hover:border-blue-400/50">
            ‚Üê Volver al pron√≥stico completo
          </button>
          <button id="close-day-modal-btn" class="flex-1 py-3 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-2xl transition-all duration-300 text-sm font-medium border border-white/30 hover:border-white/50">
            Cerrar
          </button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Animar entrada del modal
    setTimeout(() => {
      const modalContent = document.getElementById('day-modal-content')!;
      modalContent.style.transform = 'scale(1)';
      modalContent.style.opacity = '1';
    }, 10);
    
    // Event listeners para cerrar el modal
    const closeBtn = document.getElementById('close-day-modal')!;
    const closeBtnFooter = document.getElementById('close-day-modal-btn')!;
    const backBtn = document.getElementById('back-to-full-forecast')!;
    
    const closeModal = () => {
      const modalContent = document.getElementById('day-modal-content')!;
      modalContent.style.transform = 'scale(0.95)';
      modalContent.style.opacity = '0';
      
      setTimeout(() => {
        document.body.removeChild(modal);
      }, 300);
    };
    
    const backToFullForecast = () => {
      const modalContent = document.getElementById('day-modal-content')!;
      modalContent.style.transform = 'scale(0.95)';
      modalContent.style.opacity = '0';
      
      setTimeout(() => {
        document.body.removeChild(modal);
        // Reabrir el modal principal inmediatamente
        showExtendedForecast(globalWeatherData);
      }, 300);
    };
    
    closeBtn.addEventListener('click', closeModal);
    closeBtnFooter.addEventListener('click', closeModal);
    backBtn.addEventListener('click', backToFullForecast);
    
    // Cerrar al hacer clic fuera del modal
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });
    
    // Cerrar con tecla Escape (con manejo mejorado)
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        e.preventDefault();
        e.stopPropagation();
        closeModal();
        document.removeEventListener('keydown', handleKeyDown);
      }
    };
    
    // Remover event listeners previos antes de agregar nuevos
    const existingHandlers = document.querySelectorAll('[data-keydown-handler]');
    existingHandlers.forEach(handler => {
      document.removeEventListener('keydown', handler as any);
    });
    
    document.addEventListener('keydown', handleKeyDown);
  }
  
  // Hacer las funciones disponibles globalmente
  window.showDayHourlyForecast = showDayHourlyForecast;
  window.selectSpecificDate = selectSpecificDate;
  window.searchCustomDateForecast = searchCustomDateForecast;
  
  // Ciudades sugeridas
  document.querySelectorAll('.city-suggestion').forEach(button => {
    button.addEventListener('click', () => {
      const city = button.getAttribute('data-city')!;
      const input = document.getElementById('city-input') as HTMLInputElement;
      input.value = city;
      
      // Disparar b√∫squeda
      const event = new Event('submit', { bubbles: true });
      document.getElementById('weather-form')!.dispatchEvent(event);
    });
  });
</script>
